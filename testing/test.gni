# Copyright 2015 The PDFium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# ==============================================================================
# TEST SETUP
# ==============================================================================

# Define a test as an executable (or apk on Android) with the "testonly" flag
# set.
# Variable:
#   use_raw_android_executable: Use executable() rather than android_apk().
#   use_native_activity: Test implements ANativeActivity_onCreate().
template("test") {
  
  executable(target_name) {
    deps = []
    forward_variables_from(invoker, "*")

    testonly = true
    deps += []
  }

  if (defined(invoker.output_name) && target_name != invoker.output_name) {
    group("${invoker.output_name}_run") {
      testonly = true
      deps = [ ":${invoker.target_name}" ]
    }
  }
  
}

# Test defaults.
set_defaults("test") {
  configs = default_executable_configs
}

template("pdfium_unittest_source_set") {
  source_set(target_name) {
    _pdfium_root_dir = rebase_path(invoker.pdfium_root_dir, ".")

    testonly = true
    sources = invoker.sources
    configs += [ _pdfium_root_dir + ":pdfium_core_config" ]
    if (defined(invoker.configs)) {
      configs += invoker.configs
    }
    deps = [ _pdfium_root_dir + ":pdfium_unittest_deps" ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
    visibility = [ _pdfium_root_dir + ":*" ]
    forward_variables_from(invoker, [ "cflags" ])
  }
}

template("pdfium_embeddertest_source_set") {
  source_set(target_name) {
    _pdfium_root_dir = rebase_path(invoker.pdfium_root_dir, ".")

    testonly = true
    sources = invoker.sources
    configs += [ _pdfium_root_dir + ":pdfium_core_config" ]
    if (defined(invoker.configs)) {
      configs += invoker.configs
    }
    deps = [ _pdfium_root_dir + ":pdfium_embeddertest_deps" ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
    visibility = [ _pdfium_root_dir + ":*" ]
    forward_variables_from(invoker, [ "cflags" ])
  }
}
